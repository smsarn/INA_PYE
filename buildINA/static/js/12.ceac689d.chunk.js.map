{"version":3,"sources":["components/AggregateGrid.js","components/GridExcelComponent/DownloadExcel.js","components/GridExcelComponent/ExcelToolbar.js","components/GridExcelComponent/DataTable.js"],"names":["AggregateGrid","props","className","APPLET_INA","this","insNeedLine","infoIcon","getInfoINA","lang","gridTitle","dataColTitles","aggregateGrid","dataProjection","gridColumnsDataExcelInfoSection","gridColumnAligns","gridIcons","specialRow","LE","language","Component","ExcelFile","ReactExport","ExcelSheet","DownloadExcel","j","i","dataCell","styleCell","alignment","horizontal","font","name","numFmt","styleCellCol1","styleCellAlt","fill","patternType","fgColor","rgb","styleCellAltCol1","styleTitleRowInfo","color","bold","wrapText","border","top","style","bottom","right","left","styleCellLeftAllign","styleTitleRow","excelColumnsDataInfoSection","title","dataBodyTitles","dataBody","dataRow","undefined","length","toString","indexOf","isNaN","parseFloat","cleanFormat","push","value","excelColumnsHeaders","sz","width","wpx","excelColumnsDataMain","multiDataSet","columns","data","xSteps","ySteps","tempDate","Date","date","getDate","toLocaleString","month","getFullYear","downloadNow","hideElement","filename","dataSet","React","ExcelToolbar","handleClick","setExcel","classes","fontSize","marginBottom","margin","padding","excelToolbarText","Fragment","Tooltip","placement","IconButton","onClick","xmlns","height","viewBox","d","Datatable","getMuiTheme","createMuiTheme","typography","fontFamily","fontWeight","overrides","MUIDataTable","tableRoot","paper","boxShadow","borderBottom","borderRight","MuiTableRow","root","head","footer","display","MuiTableCell","sizeSmall","MUIDataTableToolbar","paddingLeft","titleRoot","icon","MUIDataTableBodyCell","backgroundColor","MUITypography","body2","MUITablePagination","caption","state","downloadExcelNow","setState","unit","divStyle","window","innerWidth","styleHeader","textAlign","position","zIndex","customHeader","index","column","TableCell","key","Info","options","filter","customHeadRender","captions","GRID_INTERNAL_CAPTIONS","excel","filterType","selectableRows","responsive","resizableColumns","selectableRowsHeader","viewColumns","search","download","print","textLabels","pagination","rowsPerPage","rows","displayRows","of","setTableProps","size","downloadOptions","separator","onDownload","buildHead","buildBody","customRowRender","dataIndex","rowIndex","dataI","Typography","TableRow","customToolbar","theme"],"mappings":"oPAQqBA,E,kDACnB,WAAYC,GAAQ,uCACZA,G,0CAER,WAEE,OACE,6BACE,wBAAIC,UAAU,QACXC,IAAYC,KAAKH,MAAMI,YAAY,GACnCF,KACD,kBAAC,IAAD,CACIG,SAAUC,YAAWH,KAAKH,MAAMO,SAItC,kBAAC,IAAD,CACEC,UAAU,GACVC,cAAeN,KAAKH,MAAMU,cAAcD,cACxCE,eAAgBR,KAAKH,MAAMU,cAAcC,eACzCC,gCACET,KAAKH,MAAMU,cAAcE,gCAE3BC,iBAAkBV,KAAKH,MAAMU,cAAcG,iBAC3CC,UAAWX,KAAKH,MAAMU,cAAcI,UACpCC,WAAYZ,KAAKH,MAAMgB,GACvBC,SAAUd,KAAKH,MAAMO,Y,GA1BYW,c,qPCArCC,EAAYC,IAAYD,UACxBE,EAAaD,IAAYD,UAAUE,WAEpBC,E,4JACnB,WAEE,IAkCIC,EACAC,EACAC,EApCEC,EAAY,CAAEC,UAAW,CAAEC,WAAY,SAAWC,KAAM,CAACC,KAAM,gBAAkBC,OAAQ,UACzFC,EAAgB,CAAEL,UAAW,CAAEC,WAAY,SAAWC,KAAM,CAACC,KAAM,gBAAkBC,OAAQ,KAC7FE,EAAe,CAAEN,UAAW,CAAEC,WAAY,SAAWC,KAAM,CAACC,KAAM,gBAAiBI,KAAM,CAAEC,YAAa,QAASC,QAAS,CAAEC,IAAK,WAAaN,OAAQ,UACtJO,EAAmB,CAAEX,UAAW,CAAEC,WAAY,SAAWC,KAAM,CAACC,KAAM,gBAAiBI,KAAM,CAAEC,YAAa,QAASC,QAAS,CAAEC,IAAK,WAAaN,OAAQ,KAC1JQ,EAAoB,CACxBV,KAAM,CAACC,KAAM,eAAgBU,MAAO,CAAEH,IAAK,UAAYI,MAAM,GAC7Dd,UAAW,CAAEe,UAAU,EAAKd,WAAY,UACxCe,OAAQ,CACNC,IAAK,CAAEC,MAAO,OAAQL,MAAO,CAAEH,IAAK,WACpCS,OAAQ,CAAED,MAAO,OAAQL,MAAO,CAAEH,IAAK,WACvCU,MAAO,CAAEF,MAAO,OAAQL,MAAO,CAAEH,IAAK,WACtCW,KAAM,CAAEH,MAAO,OAAQL,MAAO,CAAEH,IAAK,YAEvCH,KAAM,CAAEC,YAAa,QAASC,QAAS,CAAEC,IAAK,YAE1CY,EAAsB,CAAEtB,UAAW,CAAEC,WAAY,QAASC,KAAM,CAACC,KAAM,iBACvEoB,EAAgB,CACpBrB,KAAM,CAACC,KAAM,eAAgBU,MAAO,CAAEH,IAAK,UAAYI,MAAM,GAC7Dd,UAAW,CAACe,UAAU,EAAOd,WAAY,UACzCe,OAAQ,CACNC,IAAK,CAAEC,MAAO,OAAQL,MAAO,CAAEH,IAAK,WACpCS,OAAQ,CAAED,MAAO,OAAQL,MAAO,CAAEH,IAAK,WACvCU,MAAO,CAAEF,MAAO,OAAQL,MAAO,CAAEH,IAAK,WACtCW,KAAM,CAAEH,MAAO,OAAQL,MAAO,CAAEH,IAAK,YAEvCH,KAAM,CAAEC,YAAa,QAASC,QAAS,CAAEC,IAAK,YAI5Cc,EAA8B,GAC9BC,EAAQ,GACRC,EAAiB,GACjBC,EAAW,GACXC,EAAU,GAQdA,EAAU,GACV,IAAMhD,EAAOJ,KAAKH,MAAMiB,SAIxB,QAA+CuC,IAA3CrD,KAAKH,MAAMmD,4BACb,IAAK5B,EAAI,EAAGA,EAAIpB,KAAKH,MAAMmD,4BAA4BM,SAAUlC,EAAG,CAClE,IAAKC,EAAI,EAAGA,EAAIrB,KAAKH,MAAMmD,4BAA4B,GAAGM,SAAUjC,EACjEC,OACkD+B,IAAjDrD,KAAKH,MAAMmD,4BAA4B5B,GAAGC,GACtC,GACCrB,KAAKH,MAAMmD,4BAA4B5B,GAAGC,GAAGkC,WAAWC,QAAQ,MAAM,IAAsE,IAAjEC,MAAMzD,KAAKH,MAAMmD,4BAA4B5B,GAAGC,GAAGkC,aAAiF,KAA1DvD,KAAKH,MAAMmD,4BAA4B5B,GAAGC,GAAGkC,WACrMvD,KAAKH,MAAMmD,4BAA4B5B,GAAGC,GAAGkC,WAC3CG,WAAWC,YAAY3D,KAAKH,MAAMmD,4BAA4B5B,GAAGC,IAAIjB,GAC3EgD,EAAQQ,KAAK,CACXC,MAAOvC,EACPoB,MAAa,IAANtB,EAAUgB,EAAoBb,IAGzCyB,EAA4BY,KAAKR,GACjCA,EAAU,GAQd,QAAuCC,IAAnCrD,KAAKH,MAAMiE,oBAAmC,CAIhD,IAFAb,EAAMW,KAAK,CAAC,CAAEC,MAAO7D,KAAKH,MAAMoD,MAAOP,MAAO,CAAChB,KAAM,CAACqC,GAAI,KAAMpC,KAAM,eAAgBW,MAAM,OAEvFlB,EAAI,EAAGA,EAAIpB,KAAKH,MAAMiE,oBAAoBR,SAAUlC,EACvD8B,EAAeU,KAAK,CAAEX,MAAO,GAAIe,MAAO,CAAEC,IAAKjE,KAAKH,MAAMmE,OAAStC,KAAM,CAACC,KAAM,eAAgBW,MAAM,KAGxG,IAAKlB,EAAI,EAAGA,EAAIpB,KAAKH,MAAMiE,oBAAoBR,SAAUlC,EAEvDgC,EAAQQ,KAAK,CAAEC,MAAO7D,KAAKH,MAAMiE,oBAAoB1C,GAAIsB,MAAOK,IAElEI,EAASS,KAAKR,GAIhB,GADAA,EAAU,QAC8BC,IAApCrD,KAAKH,MAAMqE,qBACb,IAAK7C,EAAI,EAAGA,EAAIrB,KAAKH,MAAMqE,qBAAqB,GAAGZ,SAAUjC,EAAG,CAC9D,IAAKD,EAAI,EAAGA,EAAIpB,KAAKH,MAAMiE,oBAAoBR,SAAUlC,EACvDE,OAC4C+B,IAA1CrD,KAAKH,MAAMqE,qBAAqB9C,GAAGC,GAC/B,GACArB,KAAKH,MAAMqE,qBAAqB9C,GAAGC,GAAGkC,WAAWC,QAAQ,MAAM,IAA+D,IAA1DC,MAAMzD,KAAKH,MAAMqE,qBAAqB9C,GAAGC,GAAGkC,aAA0E,KAAnDvD,KAAKH,MAAMqE,qBAAqB9C,GAAGC,GAAGkC,WAC/KvD,KAAKH,MAAMqE,qBAAqB9C,GAAGC,GAAGkC,WACpCG,WAAWC,YAAY3D,KAAKH,MAAMqE,qBAAqB9C,GAAGC,IAAIjB,GAEpEgD,EAAQQ,KAAK,CACXC,MAAOvC,EACPoB,MAAOe,MAAMC,WAAWC,YAAYrC,EAASlB,KACzC0C,EACCzB,EAAE,EAAO,IAAJD,EAAMe,EAAiBL,EAAmB,IAAJV,EAAMS,EAAcN,IAGxE4B,EAASS,KAAKR,GACdA,EAAU,GAGd,IAAMe,EAAe,CAEnB,CACEC,QAAS,GACTC,KAAMpB,GAGR,CACEmB,QAAS,GACTC,KAAMrB,GAIR,CACEsB,OAAQ,EACRC,OAAQ,EACRH,QAASlB,EACTmB,KAAMlB,IAGNqB,EAAW,IAAIC,KACfC,EAAOF,EAASG,UAAWH,EAASI,eAAe,QAAS,CAAEC,MAAO,UAAcL,EAASM,cAEhG,OAA+B,IAA3B9E,KAAKH,MAAMkF,YAA0B,GAGrC,kBAAC/D,EAAD,CAAWgE,aAAa,EAAMC,UAAYlF,IAAW,MAAM,OAAS,SAAW2E,GAC7E,kBAACxD,EAAD,CAAYgE,QAASf,EAAcxC,KAAM5B,IAAW,OAAO,a,GAxI1BoF,IAAMpE,W,kBCE5BqE,G,mNAEjBC,YAAc,WACV,EAAKxF,MAAMyF,Y,4CAGf,WACwBtF,KAAKH,MAAjB0F,QAAR,IAEMtC,EAAM,0BAAOP,MAAO,CAAC8C,SAAU,OAAQC,aAAc,MAAOC,OAAQ,MAAOC,QAAS,QAAY3F,KAAKH,MAAM+F,kBACjH,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,CAASC,UAAU,WAAWrD,MAAO,CAAC8C,SAAU,OAAQE,OAAQ,MAAOC,QAAS,OAAW1C,MAAOA,GAC9F,kBAAC+C,EAAA,EAAD,CAAaC,QAASjG,KAAKqF,aACvB,yBAAKvF,UAAU,OAAOoG,MAAM,6BAA+BP,QAAS,MAAM3B,MAAM,KAAKmC,OAAO,KAAMC,QAAQ,aAAY,0BAAMC,EAAE,+L,GAd5GlB,IAAMpE,Y,4BCQ3BuF,E,kDACnB,WAAYzG,GAAQ,IAAD,8BACjB,cAAMA,IAQR0G,YAAc,kBACZC,YAAe,CACbC,WAAY,CACVC,WAAY,iBACZlB,SAAU,GACVmB,WAAY,OAEdC,UAAW,CACTC,aAAc,CACZC,UAAW,CACTpB,OAAQ,GAGVqB,MAAO,CACLC,UAAW,OACXC,aAAa,+BACbC,YAAY,iCAGhBC,YAAa,CACXC,KAAM,CAEJjB,OAAQ,QAEVkB,KAAM,CAEJlB,OAAQ,QAEVmB,OAAQ,CACNC,QAAS,SAGbC,aAAc,CACZH,KAAM,CACJ7B,SAAU,SAGZiC,UAAW,CACT9B,QAAS,oBAIb+B,oBAAqB,CACnBN,KAAM,CACJO,YAAa,OAEfC,UAAW,CACTpC,SAAU,GACVmB,WAAY,QAEdkB,KAAM,CACJrC,SAAU,KAGdsC,qBAAsB,CACpBV,KAAM,CACJW,gBAAiB,YAGrBC,cAAe,CACbZ,KAAM,CACJW,gBAAiB,QAGjBE,MAAO,CACL5F,MAAO,SAGb6F,mBAAoB,CAClBC,QAAS,CACLtE,MAAO,aA/EA,EAqFnByB,SAAW,WACT,IAAIP,EAA8C,IAAhC,EAAKqD,MAAMC,iBAAyB,EAAI,EAC1D,EAAKC,SAAS,CAAED,iBAAkBtD,KArFlC,EAAKqD,MAAQ,CACXC,iBAAkB,GAHH,E,0CA0FnB,WAAU,IAGJjH,EACAC,EAJG,OACHgD,EAAO,GACPjB,EAAU,GAMVmF,EAAK,GAENvI,KAAKH,MAAMS,cAAcgD,OAAO,IACjCiF,EAAK,IAEL,IAAIC,EAAS,CAAExE,MAJN,IAIoBuE,EAAMvI,KAAKH,MAAMS,cAAcgD,OAAUmC,aAAa,QAJ1E,IAKD8C,EAAKvI,KAAKH,MAAMS,cAAcgD,OAAQ,EALrC,IAKgDmF,OAAOC,aAGhEF,EAAS,CAAExE,MARF,KAOTuE,EAAO,EAPE,IAOQE,OAAOC,YAPf,IAOkC1I,KAAKH,MAAMS,cAAcgD,SACrCtD,KAAKH,MAAMS,cAAcgD,SAGtDiF,EAAK,KAEPA,EAAK,GACLC,EAAS,CAAExE,MAAO,SAIpB,IAAII,EAAU,GAEd,QAAkCf,IAA9BrD,KAAKH,MAAMW,eAA8B,CAE3C,IAAKa,EAAI,EAAGA,EAAIrB,KAAKH,MAAMW,eAAe,GAAG8C,SAAUjC,EAAG,CACxD,IAAKD,EAAI,EAAGA,EAAIpB,KAAKH,MAAMS,cAAcgD,SAAUlC,EAEjDgC,EAAQQ,KAAK5D,KAAKH,MAAMW,eAAeY,GAAGC,IAI5CgD,EAAKT,KAAKR,GACVA,EAAU,GAIZ,IACIuF,EAAc,CAChBZ,gBAAiB,UACjB1F,MAAO,UACPuG,UAAW,SACX5E,MALeuE,EAMf5B,WAAY,OACZkC,SAAU,SACVpG,IAAK,EACLqG,OAAQ,GAGNC,EAAe,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAUC,EAAa,iBAC3C,OAEE,kBAACC,EAAA,EAAD,CAAWC,IAAKH,EAAOtG,MAAOiG,QACFtF,IAAzB,EAAKxD,MAAMc,gBACoB0C,IAAhC,EAAKxD,MAAMc,UAAUqI,IAAwB,6BAAK,kBAACI,EAAA,EAAD,CAAMlJ,SAAU,EAAKL,MAAMc,UAAUqI,KAAS,8BAEhGC,EAAOtH,OAKb,IAAKN,EAAI,EAAGA,EAAIrB,KAAKH,MAAMS,cAAcgD,SAAUjC,EACjD+C,EAAQR,KAAK,CACXjC,KAAM3B,KAAKH,MAAMS,cAAce,GAC/BgI,QAAS,CACPC,QAAQ,EACRC,iBAAkBR,KAK1B,IAAMS,EAAUC,IAAuBzJ,KAAKH,MAAMiB,UAI5C8E,GAH0C4D,EAASE,MAGlCF,EAASE,OACzBL,EAAU,CACfC,QAAQ,EACRK,WAAY,WACZC,eAAgB,OAChBC,WAAY,kBACZC,kBAAkB,EAClBC,sBAAsB,EACtBC,aAAa,EACbC,QAAQ,EACRC,UAAU,EACVC,OAAM,EACNC,WAAW,CACTC,WAAY,CACVC,YAAad,EAASe,KACtBC,YAAahB,EAASiB,KAK1BH,YAAa,IACbI,cAAe,WACb,MAAO,CACL/E,QAAS,UACTgF,KAAM,QACNjF,OAAQ,QAGZkF,gBAAiB,CACf3F,SAAU,uBACV4F,UAAW,KAEbC,WAAY,SAACC,EAAWC,EAAW5G,EAASC,GAI1C,OAFA,EAAKiB,YAEE,GAET2F,gBAAiB,SAAC5G,EAAM6G,EAAWC,GACjC,IAAIzI,EAAQ,CAACkG,UAAW,SACR,YAAZvE,EAAK,KACP3B,EAAMqF,gBAAkB,QACxBrF,EAAM8C,SAAW,QAEnB,IAEInE,EAFAkJ,EAAO,GAGX,IAAKlJ,EAAI,EAAGA,EAAI,EAAKxB,MAAMS,cAAcgD,SAAUjC,EAAG,CACpD,IAAI+J,EAAQ/G,EAAKhD,GACjBkJ,EAAK3G,KACH,kBAACsF,EAAA,EAAD,CAAWC,IAAK9H,EAAGqB,MAAOA,GACxB,kBAAC2I,EAAA,EAAD,KAMND,KAKA,OACE,kBAACE,EAAA,EAAD,CAAUnC,IAAKgC,EAAUzI,MAAO,CAAEqF,qBAAyC1E,IAAxB,EAAKxD,MAAMe,WAA0BuK,EAAS,EAAE,UAAU,UAAYA,IAAW,EAAKtL,MAAMe,WAAW,UAAWuK,EAAS,EAAE,UAAU,YACvLZ,IAIPgB,cAAe,kBAAM,kBAAC,EAAD,CAAc3F,iBAAkBA,EAAkBN,SAAU,EAAKA,aAKxF,OACI,yBAAK5C,MAAO8F,GAEZ,kBAAC,IAAD,CAAkBgD,MAAOxL,KAAKuG,eAC5B,kBAAC,IAAD,CACEtD,MAAOjD,KAAKH,MAAMQ,UAClBgE,KAAMA,EACND,QAASA,EACTiF,QAASA,KAGmB,IAA/BrJ,KAAKoI,MAAMC,kBAAyB,kBAAC,EAAD,CACnCnE,qBAAsBlE,KAAKH,MAAMW,eACjCwD,MAAO,KACPF,oBAAqB9D,KAAKH,MAAMS,cAChC2C,MAAOjD,KAAKH,MAAMQ,UAClB2C,4BAA6BhD,KAAKH,MAAMY,gCACxCsE,YAAa/E,KAAKoI,MAAMC,iBACxBrD,aAAa,EACblE,SAAUd,KAAKH,MAAMiB,gB,GAxQQqE,IAAMpE,Y","file":"static/js/12.ceac689d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport DataTable from \"./GridExcelComponent/DataTable\";\r\nimport { getInfoINA } from \"../definitions/infoIconsDefinitions\";\r\nimport { Info } from \"./Info\";\r\nimport {\r\n  APPLET_INA,\r\n} from \"../definitions/generalDefinitions\";\r\n\r\nexport default class AggregateGrid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    \r\n    return (\r\n      <div>\r\n        <h3 className=\"ppi1\">\r\n          {APPLET_INA ?this.props.insNeedLine:\"\"}\r\n          {APPLET_INA &&\r\n          <Info\r\n              infoIcon={getInfoINA(this.props.lang)}\r\n          />}\r\n        </h3>\r\n\r\n        <DataTable\r\n          gridTitle=\"\"// use same title as othr pages {this.props.aggregateGrid.gridTitle}\r\n          dataColTitles={this.props.aggregateGrid.dataColTitles}\r\n          dataProjection={this.props.aggregateGrid.dataProjection}\r\n          gridColumnsDataExcelInfoSection={\r\n            this.props.aggregateGrid.gridColumnsDataExcelInfoSection\r\n          }\r\n          gridColumnAligns={this.props.aggregateGrid.gridColumnAligns}\r\n          gridIcons={this.props.aggregateGrid.gridIcons}\r\n          specialRow={this.props.LE}\r\n          language={this.props.lang}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactExport from \"react-data-export\";\r\nimport { cleanFormat } from \"../../utils/helper\";\r\nimport { APPLET_INA,\r\n  APPLET_EP\r\n} from \"../../definitions/generalDefinitions\";\r\n\r\n\r\nconst ExcelFile = ReactExport.ExcelFile;\r\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\r\n\r\nexport default class DownloadExcel extends React.Component {\r\n  render() {\r\n    // see https://github.com/securedeveloper/react-data-export for formatting\r\n    const styleCell = { alignment: { horizontal: \"right\" } ,font: {name: \"Trebuchet MS\"} , numFmt: \"##,##0\" };\r\n    const styleCellCol1 = { alignment: { horizontal: \"right\" } ,font: {name: \"Trebuchet MS\"} , numFmt: \"0\" };\r\n    const styleCellAlt = { alignment: { horizontal: \"right\" } ,font: {name: \"Trebuchet MS\"}, fill: { patternType: \"solid\", fgColor: { rgb: \"E9EAEB\" }}, numFmt: \"##,##0\" };\r\n    const styleCellAltCol1 = { alignment: { horizontal: \"right\" } ,font: {name: \"Trebuchet MS\"}, fill: { patternType: \"solid\", fgColor: { rgb: \"E9EAEB\" }}, numFmt: \"0\" };\r\n    const styleTitleRowInfo = {\r\n      font: {name: \"Trebuchet MS\", color: { rgb: \"FFFFFF\" }, bold: true},\r\n      alignment: { wrapText: true,horizontal: \"center\" },\r\n      border: {\r\n        top: { style: \"thin\", color: { rgb: \"C0C0C0\" } },\r\n        bottom: { style: \"thin\", color: { rgb: \"C0C0C0\" } },\r\n        right: { style: \"thin\", color: { rgb: \"C0C0C0\" } },\r\n        left: { style: \"thin\", color: { rgb: \"C0C0C0\" } }\r\n      },\r\n      fill: { patternType: \"solid\", fgColor: { rgb: \"7399c6\" } }\r\n    };\r\n    const styleCellLeftAllign = { alignment: { horizontal: \"left\" },font: {name: \"Trebuchet MS\"}};\r\n    const styleTitleRow = {\r\n      font: {name: \"Trebuchet MS\", color: { rgb: \"FFFFFF\" }, bold: true},\r\n      alignment: {wrapText: true , horizontal: \"center\" },\r\n      border: {\r\n        top: { style: \"thin\", color: { rgb: \"C0C0C0\" } },\r\n        bottom: { style: \"thin\", color: { rgb: \"C0C0C0\" } },\r\n        right: { style: \"thin\", color: { rgb: \"C0C0C0\" } },\r\n        left: { style: \"thin\", color: { rgb: \"C0C0C0\" } }\r\n      },\r\n      fill: { patternType: \"solid\", fgColor: { rgb: \"334D7C\" } }\r\n     \r\n    };\r\n\r\n    let excelColumnsDataInfoSection = [];\r\n    let title = [];\r\n    let dataBodyTitles = []\r\n    let dataBody = [];\r\n    let dataRow = [];\r\n    let j;\r\n    let i;\r\n    let dataCell;\r\n\r\n    // console.log(this.props.excelColumnsDataInfoSection);\r\n\r\n    // section 1 title and header data\r\n    dataRow = [];\r\n    const lang = this.props.language;\r\n    \r\n    // always name and its value: length 2\r\n\r\n    if (this.props.excelColumnsDataInfoSection !== undefined) {\r\n      for (j = 0; j < this.props.excelColumnsDataInfoSection.length; ++j) {\r\n        for (i = 0; i < this.props.excelColumnsDataInfoSection[0].length; ++i) {\r\n           dataCell =\r\n            this.props.excelColumnsDataInfoSection[j][i] === undefined\r\n              ? \"\"\r\n              : (this.props.excelColumnsDataInfoSection[j][i].toString().indexOf(\"%\")>=0 || isNaN(this.props.excelColumnsDataInfoSection[j][i].toString())===true  || this.props.excelColumnsDataInfoSection[j][i].toString()===\"\" ?\r\n              this.props.excelColumnsDataInfoSection[j][i].toString():\r\n                parseFloat(cleanFormat(this.props.excelColumnsDataInfoSection[j][i]),lang));\r\n          dataRow.push({\r\n            value: dataCell,\r\n            style: j === 0 ? styleTitleRowInfo : styleCell\r\n          });\r\n        }\r\n        excelColumnsDataInfoSection.push(dataRow);\r\n        dataRow = [];\r\n      }\r\n    }\r\n\r\n    // section 2 column headers and data\r\n    // add column titles as first data row to be able to style with another stupid libaray\r\n    // empty titles\r\n\r\n    if (this.props.excelColumnsHeaders !== undefined) {\r\n\r\n      title.push([{ value: this.props.title, style: {font: {sz: \"14\", name: \"Trebuchet MS\", bold: true}}}]);\r\n      \r\n      for (j = 0; j < this.props.excelColumnsHeaders.length; ++j) {\r\n        dataBodyTitles.push({ title: \"\", width: { wpx: this.props.width }, font: {name: \"Trebuchet MS\", bold: true}} );\r\n      }\r\n\r\n      for (j = 0; j < this.props.excelColumnsHeaders.length; ++j) {\r\n        \r\n        dataRow.push({ value: this.props.excelColumnsHeaders[j], style: styleTitleRow });\r\n      }\r\n      dataBody.push(dataRow);\r\n    }\r\n\r\n    dataRow = [];\r\n    if (this.props.excelColumnsDataMain !== undefined) {\r\n      for (i = 0; i < this.props.excelColumnsDataMain[0].length; ++i) {\r\n        for (j = 0; j < this.props.excelColumnsHeaders.length; ++j) {\r\n          dataCell =\r\n            this.props.excelColumnsDataMain[j][i] === undefined\r\n              ? \"\"\r\n              :(this.props.excelColumnsDataMain[j][i].toString().indexOf(\"%\")>=0 || isNaN(this.props.excelColumnsDataMain[j][i].toString())===true  || this.props.excelColumnsDataMain[j][i].toString()===\"\" ?\r\n              this.props.excelColumnsDataMain[j][i].toString():\r\n                parseFloat(cleanFormat(this.props.excelColumnsDataMain[j][i]),lang));\r\n\r\n          dataRow.push({\r\n            value: dataCell,\r\n            style: isNaN(parseFloat(cleanFormat(dataCell,lang)))\r\n              ? styleCellLeftAllign\r\n              : (i%2?(j===0?styleCellAltCol1:styleCellAlt):(j===0?styleCellCol1:styleCell))\r\n          });\r\n        }\r\n        dataBody.push(dataRow);\r\n        dataRow = [];\r\n      }\r\n    }\r\n    const multiDataSet = [\r\n      // section 1 title\r\n      {\r\n        columns: [],\r\n        data: title\r\n      },\r\n      // section 1 key values\r\n      {\r\n        columns: [],\r\n        data: excelColumnsDataInfoSection\r\n      },\r\n\r\n      // section 2\r\n      {\r\n        xSteps: 0,\r\n        ySteps: 1,\r\n        columns: dataBodyTitles,\r\n        data: dataBody\r\n      }\r\n    ];\r\n    var tempDate = new Date();\r\n    var date = tempDate.getDate()+ tempDate.toLocaleString('en-us', { month: 'short' })  + tempDate.getFullYear()\r\n\r\n    if (this.props.downloadNow === 0) return \"\";\r\n    else\r\n      return (\r\n        <ExcelFile hideElement={true} filename= {(APPLET_INA?\"INA\":\"PYE\") + \"_Data_\" + date}>\r\n          <ExcelSheet dataSet={multiDataSet} name={APPLET_INA?\"INAd\":\"PYE\" }/>\r\n        </ExcelFile>\r\n      );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n//import { ReactComponent as Icon} from './icon.svg';\r\nimport \"./ExcelToolbar.css\";\r\n\r\nconst defaultToolbarStyles = {\r\n    iconButton: {\r\n    },\r\n};\r\n\r\nexport default class ExcelToolbar extends React.Component {\r\n\r\n    handleClick = () => {\r\n        this.props.setExcel();\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        // console.log(\"classes\", classes)\r\n        const title=<span  style={{fontSize: '12px', marginBottom: '0px', margin: '0px', padding: '0px' }}  >{this.props.excelToolbarText}</span>\r\n        return (\r\n            <React.Fragment>\r\n                <Tooltip placement='left-end' style={{fontSize: '12px', margin: '0px', padding: '0px' }}   title={title}>\r\n                    <IconButton  onClick={this.handleClick}>\r\n                        <svg className=\"icon\" xmlns=\"http://www.w3.org/2000/svg\"   padding= '0px' width=\"30\" height=\"30\"  viewBox=\"0 0 24 24\"><path d=\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM17 13l-5 5-5-5h3V9h4v4h3z\"/></svg>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n","import React from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport {\r\n  Typography,\r\n  TableRow,\r\n  TableCell,\r\n  Card,\r\n  CardContent\r\n} from \"@material-ui/core\";\r\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\r\nimport {GRID_INTERNAL_CAPTIONS} from '../../definitions/generalDefinitions';\r\n//import DownloadExcel from './DownloadExcel'\r\nimport DownloadExcel from \"./DownloadExcel\";\r\nimport ExcelToolbar from \"./ExcelToolbar\";\r\n//import PrintToolbar from \"./printToolbar\";\r\nimport {\r\n  getInfoIconNotes\r\n} from \"../../definitions/infoIconsDefinitions.js\";\r\nimport { Info } from \"../Info\";\r\n\r\n\r\nexport default class Datatable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      downloadExcelNow: 0\r\n    };\r\n  }\r\n\r\n\r\n\r\n  getMuiTheme = () =>\r\n    createMuiTheme({\r\n      typography: {\r\n        fontFamily: '\"Trebuchet MS\"',\r\n        fontSize: 11,\r\n        fontWeight: \"100\"\r\n      },\r\n      overrides: {\r\n        MUIDataTable: {\r\n          tableRoot: {\r\n            margin: 0,\r\n            \r\n          },\r\n          paper: {\r\n            boxShadow: \"none\",\r\n            borderBottom:\"1px solid rgb(150, 150, 150)\",\r\n            borderRight:\"1px solid rgb(200, 200, 200)\",\r\n          }\r\n        },\r\n        MuiTableRow: {\r\n          root: {\r\n            //for the body\r\n            height: \"100%\"\r\n          },\r\n          head: {\r\n            //for the head\r\n            height: \"100%\"\r\n          },\r\n          footer: {\r\n            display: \"none\"\r\n          }\r\n        },\r\n        MuiTableCell: {\r\n          head: {\r\n            fontSize: \".8rem\"\r\n          },\r\n          \r\n          sizeSmall: {\r\n            padding: \"8px 3px 8px 3px\"\r\n          }\r\n\r\n        },\r\n        MUIDataTableToolbar: {\r\n          root: {\r\n            paddingLeft: \"0px\"\r\n          },\r\n          titleRoot: {\r\n            fontSize: 24,\r\n            fontWeight: 'bold'\r\n          },\r\n          icon: {\r\n            fontSize: 24\r\n          }\r\n        },\r\n        MUIDataTableBodyCell: {\r\n          root: {\r\n            backgroundColor: \"#FF0000\"\r\n           }\r\n        },\r\n        MUITypography: {\r\n          root: {\r\n            backgroundColor: \"blue\"\r\n           },\r\n           \r\n            body2: {\r\n              color: 'blue',\r\n            },\r\n        },\r\n        MUITablePagination: {\r\n          caption: {\r\n              value: 'blue',\r\n            },\r\n        }\r\n      }\r\n    });\r\n\r\n  setExcel = () => {\r\n    let downloadNow = this.state.downloadExcelNow === 1 ? 0 : 1;\r\n    this.setState({ downloadExcelNow: downloadNow });\r\n  };\r\n\r\n  render() {\r\n    let data = [];\r\n    let dataRow = [];\r\n    let j;\r\n    let i;\r\n\r\n\r\n    \r\n    let unit=65\r\n    let factor=1.3\r\n    if(this.props.dataColTitles.length<4) // for liabs\r\n      unit=95\r\n   \r\n      let divStyle={ width: factor*unit*(this.props.dataColTitles.length),  marginBottom:\"10px\"  }   \r\n    if(factor*unit*this.props.dataColTitles.length>(1/factor)* window.innerWidth)\r\n    {\r\n      unit=((1/factor)*window.innerWidth/(factor*this.props.dataColTitles.length))\r\n      divStyle={ width: factor*unit*(this.props.dataColTitles.length) }   \r\n    \r\n    } \r\n     if(unit<60)\r\n    {\r\n      unit=60 \r\n      divStyle={ width: \"100%\" } \r\n    } \r\n    \r\n    \r\n    let columns = [];\r\n\r\n    if (this.props.dataProjection !== undefined) {\r\n    \r\n      for (i = 0; i < this.props.dataProjection[0].length; ++i) {\r\n        for (j = 0; j < this.props.dataColTitles.length; ++j) {\r\n          if(j<1)\r\n          dataRow.push(this.props.dataProjection[j][i]);\r\n          else\r\n          dataRow.push(this.props.dataProjection[j][i]);\r\n        }\r\n        data.push(dataRow);\r\n        dataRow = [];\r\n      }\r\n\r\n      // build and style header and columns\r\n      let widthCustom =unit;// Math.max(80,6 * this.props.dataColTitles.length); //+'%';\r\n      let styleHeader = {\r\n        backgroundColor: \"#334d7c\",\r\n        color: \"#FFFFFF\",\r\n        textAlign: \"center\",\r\n        width: widthCustom,\r\n        fontWeight: \"bold\",\r\n        position: \"sticky\",\r\n        top: 0,\r\n        zIndex: 0,\r\n      };\r\n\r\n      let customHeader = ({ index, ...column }) => {\r\n        return (\r\n          \r\n          <TableCell key={index} style={styleHeader}>\r\n            {this.props.gridIcons !== undefined && \r\n            this.props.gridIcons[index] !== undefined && <div><Info infoIcon={this.props.gridIcons[index]}/><br/></div>} \r\n          {/* {index===this.props.headerIndex && <div><Info infoIcon={getInfoIconNotes(this.props.language)}/><br/></div>}  */}\r\n           {column.name}\r\n           </TableCell>\r\n        );\r\n      };\r\n\r\n      for (i = 0; i < this.props.dataColTitles.length; ++i) {\r\n        columns.push({\r\n          name: this.props.dataColTitles[i],\r\n          options: {\r\n            filter: false,\r\n            customHeadRender: customHeader\r\n          }\r\n        });\r\n      }\r\n    }\r\n    const captions= GRID_INTERNAL_CAPTIONS[this.props.language]\r\n    const title=<span style={{fontSize: '14px'}}  >{captions.excel}</span>\r\n            \r\n              \r\n    const excelToolbarText=captions.excel \r\n     const options = {\r\n      filter: false,\r\n      filterType: \"dropdown\",\r\n      selectableRows: \"none\",\r\n      responsive: \"scrollMaxHeight\", //this removes horiz\r\n      resizableColumns: true,\r\n      selectableRowsHeader: false,\r\n      viewColumns: false,\r\n      search: false,\r\n      download: false,\r\n      print:false,\r\n      textLabels:{\r\n        pagination: {\r\n          rowsPerPage: captions.rows,\r\n          displayRows: captions.of\r\n        },\r\n        \r\n      },\r\n      \r\n      rowsPerPage: 100,\r\n      setTableProps: () => {\r\n        return {\r\n          padding: \"default\",\r\n          size: \"small\",\r\n          margin: \"0px\"\r\n        };\r\n      },\r\n      downloadOptions: {\r\n        filename: \"INAtableDownload.csv\",\r\n        separator: \",\"\r\n      },\r\n      onDownload: (buildHead, buildBody, columns, data) => {\r\n        //handleCSVDownload2(data, columns);\r\n        this.setExcel();\r\n        //return \"\\uFEFF\" + \"dfof\\n \" + \"go to hell\\n\" + buildHead(headerNames) + buildBody(data);\r\n        return false;\r\n      },\r\n      customRowRender: (data, dataIndex, rowIndex) => {\r\n        let style = {textAlign: \"right\"};\r\n        if (data[0] === \"wwwwwww\") {\r\n          style.backgroundColor = \"green\";\r\n          style.fontSize = \"36px\";\r\n        }\r\n        var rows = [];\r\n\r\n        let i;\r\n        for (i = 0; i < this.props.dataColTitles.length; ++i) {\r\n          let dataI = data[i];\r\n          rows.push(\r\n            <TableCell key={i} style={style}>\r\n              <Typography>{\r\n /* this.formatMoney(\r\n  dataI,\r\n    this.props.gridColumnAligns[i],\r\n    \".\",\r\n    \",\"\r\n  ) } */dataI}</Typography>\r\n            </TableCell>\r\n          );\r\n        }\r\n        // console.log(rows)\r\n        return (\r\n          <TableRow key={rowIndex} style={{ backgroundColor: this.props.specialRow===undefined ? (rowIndex%2?\"#f9f9f9\":\"#e4e5e6\"):(rowIndex===this.props.specialRow?\"#d0d7e6\":(rowIndex%2?\"#f9f9f9\":\"#e4e5e6\")) }}>\r\n            {rows}\r\n          </TableRow>\r\n        );\r\n      },\r\n      customToolbar: () => <ExcelToolbar excelToolbarText={excelToolbarText} setExcel={this.setExcel} />\r\n    };\r\n\r\n   \r\n\r\n    return (\r\n        <div style={divStyle} >\r\n          \r\n        <MuiThemeProvider theme={this.getMuiTheme()}>\r\n          <MUIDataTable\r\n            title={this.props.gridTitle}\r\n            data={data}\r\n            columns={columns}\r\n            options={options}\r\n          />\r\n        </MuiThemeProvider>\r\n        {this.state.downloadExcelNow ===1 && <DownloadExcel\r\n          excelColumnsDataMain={this.props.dataProjection}\r\n          width={\"90\"}\r\n          excelColumnsHeaders={this.props.dataColTitles}\r\n          title={this.props.gridTitle}\r\n          excelColumnsDataInfoSection={this.props.gridColumnsDataExcelInfoSection}\r\n          downloadNow={this.state.downloadExcelNow}\r\n          hideElement={true}\r\n          language={this.props.language}\r\n        />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}